/*
 * hw.h
 *
 *  Created on: 03 june 2022
 *      Author: Alex
 *
 *  2022 DEC 23
 *  	added temperature parameters to the HW::init() allowing to initialize the hardware at the startup
 *  2024 NOV 10, v.1.08
 *  	Added HW::t_stm32 and HW:vrefint variables to read the MCU temperature
 *  	Added HW::updateIntTemp()
 *  	Added new arguments to HW::init()
 *  2025 JAN 28
 *		Separate ambientTemp() into two routines to calculate stm32 temperature and steinhart sensor temperature inside Hakko T12 handle
 *		Save MCU internal temperature at startup to adjust internal temperature. As soon as the MCU temperature is higher than actual ambient temperature,
 *		return average value between MCU temperature and MCU temperature at startup.
 */

#ifndef HW_H_
#define HW_H_

/*
 * This is a fusion file to join c++ project and main.c file generated by CubeMX
 */

#include "stat.h"
#include "iron.h"
#include "gun.h"
#include "encoder.h"
#include "display.h"
#include "config.h"
#include "buzzer.h"
#include "nls_cfg.h"

extern TIM_HandleTypeDef htim3;
extern TIM_HandleTypeDef htim4;

class HW {
	public:
		HW(void) : cfg(),
			u_enc(&htim3),
			l_enc(&htim4)									{ }
		uint16_t			ambientRaw(void)				{ return t_amb.read();							}
		bool				noAmbientSensor(void)			{ return t_amb.read() >= max_ambient_value;		}
		void				updateAmbient(uint16_t value)	{ t_amb.update(value);							}
		void				updateIntTemp(uint16_t vref, uint16_t t_mcu)
															{ vrefint.update(vref), t_stm32.update(t_mcu);	}
		void				initAmbient(uint16_t value)		{ t_amb.reset(value);							}
		CFG_STATUS			init(uint16_t t12_temp, uint16_t jbc_temp, uint16_t gun_temp, uint16_t ambient, uint16_t vref, uint32_t t_mcu);
		int32_t				ambientTemp(void);				// T12 IRON ambient temperature
		CFG			cfg;
		NLS			nls;
		DSPL		dspl;
		IRON		t12, jbc;
		RENC		u_enc, l_enc;							// Upper encoder and lower encoder
		HOTGUN		hotgun;
		BUZZER		buzz;
	private:
		int32_t 			internalTemp(int32_t raw_stm32);
		int32_t 			steinhartTemp(int32_t raw_ambient);
		EMP_AVERAGE 	t_amb;								// Exponential average of the ambient temperature
		EMP_AVERAGE		t_stm32;							// Exponential average of the internal stm32 MCU temperature
		EMP_AVERAGE		vrefint;							// Exponential average of the VREF value
		int8_t			start_temp			= 0;			// The internal temperature at startup
		const uint8_t	ambient_emp_coeff	= 30;			// Exponential average coefficient for ambient temperature
		const uint16_t	max_ambient_value	= 3900;			// About -30 degrees. If the soldering IRON disconnected completely, "ambient" value is greater than this
};

#endif
